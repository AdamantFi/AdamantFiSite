import { ConfigToken } from '@/config/tokens';
import { useSecretNetwork } from '@/hooks/useSecretNetwork';
import { forceCreateViewingKey, generateSecureViewingKey } from '@/utils/viewingKeys';
import * as Dialog from '@radix-ui/react-dialog';
import { CheckIcon, Cross2Icon, EyeClosedIcon, EyeOpenIcon } from '@radix-ui/react-icons';
import * as Tabs from '@radix-ui/react-tabs';
import { Key, Loader2, Shuffle, User } from 'lucide-react';
import React, { useState } from 'react';

interface DualViewingKeyCreatorProps {
  token: ConfigToken;
  onSuccess: (viewingKey: string) => void;
  onError: (error: Error) => void;
  onClose: () => void;
  isOpen: boolean;
  title?: string;
  description?: string;
}

type KeyCreationMode = 'auto' | 'custom';

const DualViewingKeyCreator: React.FC<DualViewingKeyCreatorProps> = ({
  token,
  onSuccess,
  onError,
  onClose,
  isOpen,
  title = 'Setup Viewing Key',
  description,
}) => {
  const [mode, setMode] = useState<KeyCreationMode>('auto');
  const [customKey, setCustomKey] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [showCustomKey, setShowCustomKey] = useState(false);
  const [autoGeneratedKey, setAutoGeneratedKey] = useState('');
  const [validationError, setValidationError] = useState('');
  const { secretjs } = useSecretNetwork();

  // Generate a preview key for auto mode
  const generatePreviewKey = () => {
    const newKey = generateSecureViewingKey();
    setAutoGeneratedKey(newKey);
  };

  // Initialize with a preview key
  React.useEffect(() => {
    if (mode === 'auto' && !autoGeneratedKey) {
      generatePreviewKey();
    }
  }, [mode, autoGeneratedKey]);

  // Validate custom key
  const validateCustomKey = (key: string): string => {
    if (!key.trim()) {
      return 'Viewing key cannot be empty';
    }
    if (key.length < 8) {
      return 'Viewing key must be at least 8 characters';
    }
    if (key.length > 128) {
      return 'Viewing key must be less than 128 characters';
    }
    // Check for basic ASCII characters (Secret Network requirement)
    if (!/^[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?`~]+$/.test(key)) {
      return 'Viewing key contains invalid characters';
    }
    return '';
  };

  const handleCustomKeyChange = (value: string) => {
    setCustomKey(value);
    const error = validateCustomKey(value);
    setValidationError(error);
  };

  const createViewingKey = async () => {
    if (!secretjs) {
      onError(new Error('Wallet not connected'));
      return;
    }

    try {
      setIsCreating(true);

      let keyToUse: string;

      if (mode === 'auto') {
        // Use the auto-generated key or generate a new one
        keyToUse = autoGeneratedKey || generateSecureViewingKey();
      } else {
        // Validate custom key
        const error = validateCustomKey(customKey);
        if (error) {
          setValidationError(error);
          return;
        }
        keyToUse = customKey.trim();
      }

      console.log(`Creating viewing key for token ${token.symbol} (mode: ${mode})`);

      const result = await forceCreateViewingKey({
        secretjs,
        contractAddress: token.address,
        codeHash: token.codeHash,
        customKey: keyToUse,
        onProgress: (message) => {
          console.log('Key Creation Progress:', message);
        },
      });

      if (result.success) {
        console.log('Viewing key created successfully');
        onSuccess(result.viewingKey!);
      } else {
        throw new Error(result.error || 'Failed to create viewing key');
      }
    } catch (error) {
      console.error('Error creating viewing key:', error);
      onError(error instanceof Error ? error : new Error(String(error)));
    } finally {
      setIsCreating(false);
    }
  };

  const canCreate = mode === 'auto' || (mode === 'custom' && customKey.trim() && !validationError);

  return (
    <Dialog.Root open={isOpen} onOpenChange={onClose}>
      <Dialog.Portal>
        <Dialog.Overlay className="fixed inset-0 bg-black/50 z-50" />
        <Dialog.Content className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-adamant-box-dark border border-adamant-box-border rounded-lg w-[90vw] max-w-md z-50 flex flex-col max-h-[85vh]">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b border-adamant-box-border">
            <div className="flex items-center gap-2">
              <Key className="w-4 h-4 text-adamant-gradientBright" />
              <Dialog.Title className="text-adamant-text-box-main font-medium text-sm">
                {title}
              </Dialog.Title>
            </div>
            <Dialog.Close asChild>
              <button
                className="text-adamant-text-box-secondary hover:text-adamant-text-box-main transition-colors"
                disabled={isCreating}
              >
                <Cross2Icon className="w-4 h-4" />
              </button>
            </Dialog.Close>
          </div>

          {/* Content */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {/* Token Info */}
            <div className="text-sm">
              <div className="flex items-center gap-2 mb-2">
                <span className="font-medium text-adamant-text-box-main">{token.symbol}</span>
                <span className="text-adamant-text-box-secondary">({token.name})</span>
              </div>
              <p className="text-xs text-adamant-text-box-secondary">
                {description ||
                  'Choose how to create your viewing key. Auto-generate for maximum security, or provide your own key.'}
              </p>
            </div>

            {/* Mode Selection Tabs */}
            <Tabs.Root value={mode} onValueChange={(value) => setMode(value as KeyCreationMode)}>
              <Tabs.List className="grid w-full grid-cols-2 bg-adamant-box-regular border border-adamant-box-border rounded-lg p-1">
                <Tabs.Trigger
                  value="auto"
                  className="flex items-center justify-center gap-2 px-3 py-2 text-xs font-medium rounded-md transition-colors data-[state=active]:bg-adamant-gradientBright data-[state=active]:text-white text-adamant-text-box-secondary hover:text-adamant-text-box-main"
                >
                  <Shuffle className="w-3 h-3" />
                  Auto-Generate
                </Tabs.Trigger>
                <Tabs.Trigger
                  value="custom"
                  className="flex items-center justify-center gap-2 px-3 py-2 text-xs font-medium rounded-md transition-colors data-[state=active]:bg-adamant-gradientBright data-[state=active]:text-white text-adamant-text-box-secondary hover:text-adamant-text-box-main"
                >
                  <User className="w-3 h-3" />
                  Custom Key
                </Tabs.Trigger>
              </Tabs.List>

              {/* Auto-Generate Tab */}
              <Tabs.Content value="auto" className="mt-4 space-y-3">
                <div className="bg-adamant-box-regular border border-adamant-box-border p-3 rounded">
                  <div className="flex items-center gap-2 mb-2">
                    <Shuffle className="w-4 h-4 text-adamant-gradientBright" />
                    <span className="text-sm font-medium text-adamant-text-box-main">
                      Secure Auto-Generation
                    </span>
                  </div>
                  <p className="text-xs text-adamant-text-box-secondary mb-3">
                    We'll generate a cryptographically secure 64-character viewing key for maximum
                    security.
                  </p>

                  {/* Preview Generated Key */}
                  <div className="space-y-2">
                    <label className="text-xs text-adamant-text-box-secondary">Preview Key:</label>
                    <div className="flex items-center gap-2">
                      <code className="flex-1 text-xs bg-adamant-box-dark p-2 rounded border border-adamant-box-border text-adamant-text-box-main font-mono">
                        {autoGeneratedKey
                          ? showCustomKey
                            ? autoGeneratedKey
                            : `${autoGeneratedKey.slice(0, 8)}${'â€¢'.repeat(
                                48
                              )}${autoGeneratedKey.slice(-8)}`
                          : 'Generating...'}
                      </code>
                      <button
                        onClick={() => setShowCustomKey(!showCustomKey)}
                        className="p-1 text-adamant-text-box-secondary hover:text-adamant-text-box-main transition-colors"
                        title={showCustomKey ? 'Hide key' : 'Show key'}
                      >
                        {showCustomKey ? (
                          <EyeClosedIcon className="w-3 h-3" />
                        ) : (
                          <EyeOpenIcon className="w-3 h-3" />
                        )}
                      </button>
                      <button
                        onClick={generatePreviewKey}
                        className="p-1 text-adamant-text-box-secondary hover:text-adamant-text-box-main transition-colors"
                        title="Generate new key"
                        disabled={isCreating}
                      >
                        <Shuffle className="w-3 h-3" />
                      </button>
                    </div>
                  </div>
                </div>

                <div className="bg-green-500/10 border border-green-500/20 p-3 rounded">
                  <div className="flex items-start gap-2">
                    <CheckIcon className="w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" />
                    <div className="text-xs text-green-400">
                      <p className="font-medium mb-1">Recommended for most users</p>
                      <p>Maximum security with cryptographically random generation</p>
                    </div>
                  </div>
                </div>
              </Tabs.Content>

              {/* Custom Key Tab */}
              <Tabs.Content value="custom" className="mt-4 space-y-3">
                <div className="bg-adamant-box-regular border border-adamant-box-border p-3 rounded">
                  <div className="flex items-center gap-2 mb-2">
                    <User className="w-4 h-4 text-adamant-gradientBright" />
                    <span className="text-sm font-medium text-adamant-text-box-main">
                      Bring Your Own Key
                    </span>
                  </div>
                  <p className="text-xs text-adamant-text-box-secondary mb-3">
                    Use your own viewing key. Perfect for syncing across multiple dApps or
                    maintaining consistent keys.
                  </p>

                  {/* Custom Key Input */}
                  <div className="space-y-2">
                    <label className="text-xs text-adamant-text-box-secondary">
                      Your Viewing Key:
                    </label>
                    <div className="relative">
                      <input
                        type={showCustomKey ? 'text' : 'password'}
                        value={customKey}
                        onChange={(e) => handleCustomKeyChange(e.target.value)}
                        placeholder="Enter your viewing key..."
                        className="w-full text-xs bg-adamant-box-dark border border-adamant-box-border rounded px-3 py-2 pr-8 text-adamant-text-box-main placeholder-adamant-text-box-secondary focus:outline-none focus:border-adamant-gradientBright"
                        disabled={isCreating}
                      />
                      <button
                        type="button"
                        onClick={() => setShowCustomKey(!showCustomKey)}
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 text-adamant-text-box-secondary hover:text-adamant-text-box-main transition-colors"
                        title={showCustomKey ? 'Hide key' : 'Show key'}
                      >
                        {showCustomKey ? (
                          <EyeClosedIcon className="w-3 h-3" />
                        ) : (
                          <EyeOpenIcon className="w-3 h-3" />
                        )}
                      </button>
                    </div>
                    {validationError && <p className="text-xs text-red-400">{validationError}</p>}
                  </div>
                </div>

                <div className="bg-blue-500/10 border border-blue-500/20 p-3 rounded">
                  <div className="flex items-start gap-2">
                    <User className="w-4 h-4 text-blue-400 mt-0.5 flex-shrink-0" />
                    <div className="text-xs text-blue-400">
                      <p className="font-medium mb-1">Advanced users</p>
                      <p>Use the same key across multiple applications for convenience</p>
                    </div>
                  </div>
                </div>
              </Tabs.Content>
            </Tabs.Root>

            {/* General Info */}
            <div className="bg-adamant-box-regular border border-adamant-box-border p-3 rounded">
              <div className="flex items-start gap-2">
                <Key className="w-4 h-4 text-adamant-gradientBright mt-0.5 flex-shrink-0" />
                <div className="text-xs text-adamant-text-box-secondary">
                  <p>
                    After creating, the key will be automatically stored in your Keplr wallet and
                    your balance should appear shortly.
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Footer Actions */}
          <div className="flex gap-2 p-4 border-t border-adamant-box-border">
            <button
              onClick={() => void createViewingKey()}
              disabled={isCreating || !canCreate}
              className="flex-1 bg-adamant-gradientBright hover:bg-adamant-gradientDark disabled:bg-adamant-app-buttonDisabled disabled:cursor-not-allowed text-adamant-text-button-form-main font-medium py-2 px-3 rounded text-sm transition-colors flex items-center justify-center gap-2"
            >
              {isCreating ? (
                <>
                  <Loader2 className="w-3 h-3 animate-spin" />
                  Creating...
                </>
              ) : (
                <>
                  <Key className="w-3 h-3" />
                  {mode === 'auto' ? 'Generate & Create' : 'Use Custom Key'}
                </>
              )}
            </button>
            <Dialog.Close asChild>
              <button
                disabled={isCreating}
                className="px-3 py-2 text-adamant-text-box-secondary hover:text-adamant-text-box-main transition-colors text-sm disabled:opacity-50"
              >
                Cancel
              </button>
            </Dialog.Close>
          </div>
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  );
};

export default DualViewingKeyCreator;
